const usernameInput = document.getElementById("usernameInput");
const nicknameButton = document.getElementById("nicknameButton");
const auditoriumButtons = document.querySelectorAll(".auditorium-button");
const chatContainer = document.getElementById("chatContainer");
const nicknameForm = document.getElementsByClassName("nickname-form");

let username = "–ê–Ω–æ–Ω–∏–º";
let currentRoom = null;
let currentChatWindow = null;
let socket = null;
let chatWindows = {};

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
nicknameButton.addEventListener("click", () => {
    username = usernameInput.value.trim() || "–ê–Ω–æ–Ω–∏–º";
    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    nicknameForm.style.display = "none";
    auditoriumButtonsContainer.style.display = "none";
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    chatContainer.style.display = "block";
});

function createChatWindow(room) {
    const chatWindow = document.createElement("div");
    chatWindow.className = "chat-window";
    chatWindow.dataset.room = room;

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
    const chatHeader = document.createElement("div");
    chatHeader.className = "chat-header";
    chatHeader.textContent = `–ß–∞—Ç –∫–æ–º–Ω–∞—Ç—ã: ${room}`;
    chatWindow.appendChild(chatHeader);


    // –°–æ–æ–±—â–µ–Ω–∏—è
    const chatMessages = document.createElement("div");
    chatMessages.className = "chat-messages";
    chatMessages.id = `chat-messages-${room}`;
    chatWindow.appendChild(chatMessages);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞
        const messageInputContainer = document.createElement("div");
        messageInputContainer.className = "message-input-container";

    const chatInput = document.createElement("input");
    chatInput.className = "message-input";
    chatInput.placeholder = "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...";
    messageInputContainer.appendChild(chatInput);

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–º–æ–¥–∑–∏
    const emojiButton = document.createElement("button");   
    emojiButton.className = "emoji-button";
    emojiButton.textContent = "üòä";
    messageInputContainer.appendChild(emojiButton);

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–º–æ–¥–∑–∏
    const emojiPicker = document.createElement("div");
    emojiPicker.className = "emoji-picker";
    emojiPicker.style.display = "none"; // –°–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    emojiButton.addEventListener("click", () => {
        emojiPicker.style.display = emojiPicker.style.display === "none" ? "block" : "none";
    });

    const emojis = ["üòÄ", "üòÅ", "üòÇ", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòâ", "üòä", "üòé"]; // –ú–∞—Å—Å–∏–≤ —ç–º–æ–¥–∑–∏
    emojis.forEach((emoji) => {
        const emojiSpan = document.createElement("span");
        emojiSpan.className = "emoji";
        emojiSpan.textContent = emoji;
        emojiSpan.addEventListener("click", () => {
            chatInput.value += emoji; // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            emojiPicker.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        });
        emojiPicker.appendChild(emojiSpan);
    });

    messageInputContainer.appendChild(emojiPicker);

    const sendButton = document.createElement("button");
    sendButton.textContent = "‚û§";
    sendButton.className = "send-button";
    sendButton.id = "sendButton";
    sendButton.addEventListener("click", () => {
        const message = chatInput.value.trim();
        if (message) {
            sendMessage(room, chatInput); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        }
    });
    messageInputContainer.appendChild(sendButton);
    chatWindow.appendChild(messageInputContainer);
    document.getElementById("chatContainer").appendChild(chatWindow);
    chatWindows[room] = chatWindow;
    return chatWindow;
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
function sendMessage(room, messageInput) {
    const message = messageInput.value.trim();
    if (message && socket && socket.readyState === WebSocket.OPEN) {
        const payload = {
            action: "message",
            room: room,
            username: username,
            message: message,
        };

        socket.send(JSON.stringify(payload)); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        messageInput.value = ""; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
const sendButton = document.querySelector("#send-button");
if (sendButton) {
    sendButton.addEventListener("click", sendMessage);
}

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ Enter
const messageInput = document.querySelector("#message-input");
if (messageInput) {
    messageInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
            sendMessage(currentRoom, messageInput); // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        }
    });
};

// –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–∫–Ω–æ —á–∞—Ç–∞
function appendMessage(room, data) {
    const chatMessages = document.querySelector(`#chat-messages-${room}`);
    if (chatMessages) {
        const messageElement = document.createElement("div");
        messageElement.classList.add("chat-message");

        const senderUsername = data.username || "–ê–Ω–æ–Ω–∏–º";
        const isMessageFromMe = senderUsername === username;

        if (senderUsername === "–ê–Ω–æ–Ω–∏–º" || !isMessageFromMe) {
            messageElement.classList.add("other");
        } else {
            messageElement.classList.add("me");
        }

        const usernameElement = document.createElement("div");
        usernameElement.classList.add("username");
        usernameElement.textContent = senderUsername;
        messageElement.appendChild(usernameElement);

        const messageText = document.createElement("div");
        messageText.textContent = data.message;
        messageElement.appendChild(messageText);

        const timestamp = new Date(data.timestamp).toLocaleTimeString();
        const timestampElement = document.createElement("div");
        timestampElement.classList.add("timestamp");
        timestampElement.textContent = timestamp;
        messageElement.appendChild(timestampElement);

        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
function connectWebSocket() {
    socket = new WebSocket("ws://127.0.0.1:8000/ws/chat");

    socket.onopen = () => {
        console.log("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
        if (currentRoom) {
            socket.send(JSON.stringify({ action: "join", room: currentRoom }));
        }
    };

    socket.onmessage = (event) => {
        const data = JSON.parse(event.data);
        console.log("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:", data);
        const room = data.room;

        appendMessage(room, data);
    };

    socket.onclose = () => {
        console.error("WebSocket –∑–∞–∫—Ä—ã—Ç. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
        setTimeout(connectWebSocket, 1000);
    };

    socket.onerror = (error) => {
        console.error("WebSocket –æ—à–∏–±–∫–∞:", error);
    };
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —á–∞—Ç-–∫–æ–º–Ω–∞—Ç–∞–º–∏
auditoriumButtons.forEach((button) => {
    button.addEventListener("click", (e) => {
        const room = e.target.dataset.room;
        
        if (currentChatWindow) {
            chatContainer.removeChild(currentChatWindow);
        }

        currentRoom = room;
        document.getElementById("chatContainer").style.display = "flex";

        if (!chatWindows[room]) {
            currentChatWindow = createChatWindow(room);
            chatContainer.appendChild(currentChatWindow);

            fetch(`http://127.0.0.1:8000/api/chat/history/${room}`)
                .then((response) => response.json())
                .then((messages) => {
                    const chatMessages = document.querySelector(`#chat-messages-${room}`);
                    chatMessages.innerHTML = "";

                    messages.forEach((data) => {
                        appendMessage(room, data);
                    });
                });
        } else {
            currentChatWindow = chatWindows[room];
            chatContainer.appendChild(currentChatWindow);
        }

        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(
                JSON.stringify({
                    action: "join",
                    room: currentRoom,
                })
            );
        }
    });
});

// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function () {
});

// –ó–∞–ø—É—Å–∫ WebSocket
connectWebSocket();
